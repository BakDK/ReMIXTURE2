formattable(new_data, list(
Color=color_tile(color_vec)
))
library(DT)
datatable(new_data, rownames = F) %>% formatStyle(names(new_data), backgroundColor=styleEqual(color_vec, color_vec))
datatable(new_data, rownames = F) %>% formatStyle(Color, backgroundColor=styleEqual(color_vec, color_vec))
datatable(new_data, rownames = F) %>% formatStyle('Color', backgroundColor=styleEqual(color_vec, color_vec))
datatable(new_data, rownames = F)
data <- read.csv("rename.csv")
new_data <- drop_na(data.frame(cbind(data$Group_color, data$Color)) )
new_data <- new_data[!apply(new_data == "", 1, all),]
colnames(new_data) <- c("Name", "Color")
color_vec <- new_data$Color
datatable(new_data, rownames = F) %>% formatStyle('Color',
backgroundColor=styleEqual(color_vec, color_vec))
options(DT.options = list(pageLength = 50))
datatable(new_data, rownames = F) %>% formatStyle('Color',
backgroundColor=styleEqual(color_vec, color_vec))
runApp()
data$Group_color['base']
data$Color[data$Group_color == 'base']
data <- read.csv("rename.csv")
data$Color[data$Group_color == 'base']
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
vals$rre_data
vals$rre_data
# Read data
rre_data <- read.delim("sco_rre.txt")
# Clean RRE data. Extract coordinates and Locus tag with double underscore delimiter (__)
rre_data <- rre_data %>%
separate(Gene.name, c("Sequence","Coordinates","Locus_tag"),sep = "__") %>%
separate(Coordinates, c("Start", "Stop"),sep = "-")
# Add chromosome info column
rre_data$chromosome <- rep("RRE",length(rre_data$Sequence))
# Add ID column
rre_data$ID <- seq(1:length(rre_data$Sequence))
rre_data$Cluster <- rre_data$ID
rre_data <- data.frame(rre_data)
rre_data['Type'] <- 'ripp'
rre_data$Probability
if (!is.null(rre_data$Probability){
if (!is.null(rre_data$Probability){
is.null(rre_data$Probability)
if (!is.null(rre_data$Probability)){
a = 'YES'
}
runApp()
runApp()
runApp()
runApp()
View(dup_table)
View(known_table)
View(known_table)
runApp()
runApp()
biocircos_rre
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
if (!require("BiocManager"))
install.packages("BiocManager")
BiocManager::install("GenomicRanges")
library(GenomicRanges)
anti_data <- read.csv("example_data/sco_antismash.csv")
setwd("/run/media/pavloh/DATA_BANK/WORK/BGCViz")
anti_data <- read.csv("example_data/sco_antismash.csv")
# Add chromosome column
anti_data$chromosome <-  rep("A", length(anti_data$Cluster))
# Type magic
anti_data$Type <- str_trim(tolower(anti_data$Type))
anti_data['Type2'] <- str_trim(tolower(anti_data$Type))
vals$anti_type <- anti_data$Type2
vals$anti_data <- anti_data
# Add chromosome column
anti_data$chromosome <-  rep("A", length(anti_data$Cluster))
# Type magic
anti_data$Type <- str_trim(tolower(anti_data$Type))
# Upload required libraries
library(shiny)
library(tidyverse)
library(plyr)
library(plotly)
library(BioCircos)
library(ggplot2)
library(shinyjs)
library(rjson)
library(stringr)
library(RSQLite)
library(readr)
library(DT)
# Type magic
anti_data$Type <- str_trim(tolower(anti_data$Type))
anti_data['Type2'] <- str_trim(tolower(anti_data$Type))
vals$anti_type <- anti_data$Type2
# Read data
data <- fromJSON(file = "example_data/sco_prism.json")
types <- sapply(data$prism_results$clusters, function(x){
tolower(x$type)
})
types <- sapply(types, function(x){
if (length(unlist(x))>1){
tmp <- str_trim(paste0(unlist(x), collapse = '', sep = " "))
gsub(" ", "__", tmp)
}else{
x
}
})
start <- sapply(data$prism_results$clusters, function(x){
x$start
})
end <- sapply(data$prism_results$clusters, function(x){
x$end
})
prism_data <- data.frame(cbind(start, end, types))
prism_data <- prism_data %>%
transmute(Cluster=as.numeric(rownames(prism_data)), Start=as.numeric(start), Stop = as.numeric(end), Type = types)
regul_genes_orfs <- sapply(data$prism_results$regulatory_genes, function(x){
x$orf
})
location <-  sapply(data$prism_results$orfs[[1]]$orfs, function(y){
sapply(regul_genes_orfs, function(x){
if (y$name == x) {
y$coordinates
}
})
})
location <- Filter(Negate(is.null), location)
reg_genes <-data.frame(t(data.frame(sapply(location, function(x){unlist(x)}))))
colnames(reg_genes) <- c("Start", "Stop")
reg_genes$Type <- 'regulatory'
reg_genes$Type2 <- reg_genes$Type
reg_genes$Score <- sapply(data$prism_results$regulatory_genes, function(x){
x$score
})
reg_genes$Name <- sapply(data$prism_results$regulatory_genes, function(x){
x$name
})
reg_genes$Full_name <- sapply(data$prism_results$regulatory_genes, function(x){
x$full_name
})
resist_genes_orfs <- sapply(data$prism_results$resistance_genes, function(x){
x$orf
})
location <-  sapply(data$prism_results$orfs[[1]]$orfs, function(y){
sapply(resist_genes_orfs, function(x){
if (y$name == x) {
y$coordinates
}
})
})
location <- Filter(Negate(is.null), location)
res_genes <-data.frame(t(data.frame(sapply(location, function(x){unlist(x)}))))
colnames(res_genes) <- c("Start", "Stop")
res_genes$Type <- 'resistance'
res_genes$Type2 <- res_genes$Type
res_genes$Score <- sapply(data$prism_results$resistance_genes, function(x){
x$score
})
res_genes$Name <- sapply(data$prism_results$resistance_genes, function(x){
x$name
})
res_genes$Full_name <- sapply(data$prism_results$resistance_genes, function(x){
x$full_name
})
final_reg <- rbind(res_genes, reg_genes)
final_reg$ID <- seq(1:dim(final_reg)[1])
final_reg$Cluster <- final_reg$ID
rownames(final_reg) <- as.numeric(seq(1:dim(final_reg)[1]))
sempi_data <- read.csv("example_data/sco_sempi.csv")
sempi_data['Type2'] <- str_trim(tolower(sempi_data$Type))
vals$sempi_type <- sempi_data$Type2
vals$sempi_data <- sempi_data
# Add chromosome info column
vals$sempi_data$chromosome <-  rep("S", length(vals$sempi_data$Cluster))
# Add ID column (same as Cluster)
vals$sempi_data$ID <- vals$sempi_data$Cluster
# Save file
write.csv(vals$sempi_data, "sempi_data.csv", row.names = F)
vals$sempi_data_input = TRUE
sempi_data <- read.csv("example_data/sco_sempi.csv")
sempi_data['Type2'] <- str_trim(tolower(sempi_data$Type))
vals$sempi_type <- sempi_data$Type2
sempi_data['Type2'] <- str_trim(tolower(sempi_data$Type))
sempi_type <- sempi_data$Type2
sempi_data <- sempi_data
# Add chromosome info column
sempi_data$chromosome <-  rep("S", length(sempi_data$Cluster))
# Add ID column (same as Cluster)
sempi_data$ID <- sempi_data$Cluster
data <- read.delim("example_data/sco_duptable.tsv")
get_location_duptable <- function(x, y){
test <- str_split(x, ";")
test2<- sub(".*loc\\|", "", test[[1]])
test3 <- str_split(test2, " ")
res <- list()
for (i in seq(1:length(test3))){
id <- paste('hit',as.character(i), sep = "_")
start <- test3[[i]][1]
stop <- test3[[i]][2]
res_1 <- list(id,start, stop)
res <- append(res, list(res_1))
}
return(res)
}
dup_table <- data.frame()
for (i in seq(1:dim(data)[1])){
lst <- get_location_duptable(data$X.Hits_listed.[i])
fin_data <- data.frame(do.call("rbind", lst))
fin_data$Core_gene <- data$X.Core_gene[i]
fin_data$Description <- data$Description[i]
fin_data$Count <- data$Count[i]
colnames(fin_data) <- c("Hit", "Start", "Stop", "Core", "Description", "Count")
dup_table <- rbind(dup_table, fin_data)
}
dup_table$Hit <- unlist(dup_table$Hit)
dup_table$Start <- unlist(dup_table$Start)
dup_table$Stop <- unlist(dup_table$Stop)
dup_table$Start <- as.numeric(dup_table$Start )
dup_table$Stop <- as.numeric(dup_table$Stop)
dup_table$ID <- seq(1: dim(dup_table)[1])
dup_table$Cluster <- dup_table$ID
dup_table$Type <- 'core'
dup_table$Type2 <- dup_table$Type
dup_table$Evalue <- NA
dup_table$Bitscore <- NA
dup_table$Model <- "Core"
data <- read.delim("example_data/sco_knownhits.tsv")
locations <- sapply(data$Sequence.description, function(x){
tail(str_split(x , "\\|")[[1]], 1)
})
start <- sapply(locations, function(x){
str_split(x, "_")[[1]][1]
})
stop <- sapply(locations, function(x){
str_split(x, "_")[[1]][2]
})
known_table <- data.frame(cbind(start, stop))
colnames(known_table) <- c("Start", "Stop")
rownames(known_table) <- seq(1:dim(known_table)[1])
known_table$Start <- as.numeric(known_table$Start )
known_table$Stop <- as.numeric(known_table$Stop)
known_table$Description <- data$Description
known_table$Model <- data$X.Model
known_table$Evalue <- data$evalue
known_table$Bitscore <- data$bitscore
known_table$ID <- seq(1:dim(known_table)[1])
known_table$Cluster <-known_table$ID
known_table$Type <- 'resistance'
known_table$Type2 <- known_table$Type
known_table$Hit <- NA
known_table$Core <- "Not_core"
known_table$Count <- 1
arts_data <- rbind(dup_table, known_table)
arts_data$ID <- seq(1:dim(arts_data)[1])
arts_data$Cluster <- arts_data$ID
vals$arts_data <- arts_data
vals$data_upload_count <-  vals$data_upload_count +1
vals$arts_data_input <- T
# Create empty dataframe to populate later
fullnes_of_annotation <- data.frame(NA, NA, NA)
colnames(fullnes_of_annotation) <- c("Score", "Source", "Quantity")
fullnes_of_annotation <- drop_na(fullnes_of_annotation)
# Vectors of columns of score values in DeepBGC data for later subset
score_activity <- c("antibacterial", "cytotoxic","inhibitor","antifungal")
score_bgc <- c("deepbgc_score")
score_cluster_type <- c("alkaloid", "nrps","other","pks","ripp","saccharide","terpene")
# Subset dataframe with scores' vectors. Get max value vectors
score_a <- apply(vals$deep_data %>% select(c("antibacterial", "cytotoxic","inhibitor","antifungal")),1, function(x) max(x))
score_d <- apply(vals$deep_data %>% select(c("deepbgc_score")),1, function(x) max(x))
score_c <- apply(vals$deep_data %>% select(c("alkaloid", "nrps","other","pks","ripp","saccharide","terpene")),1, function(x) max(x))
score_type <- score_activity
# Store DeepBGC dataframe in variable
deep_inter <- deep_data
drop_cols <- c("Alkaloid", "NRP","Other","Polyketide","RiPP","Saccharide","Terpene")
# Store antismash data in local variable, with column renaming
anti_data_chromo <- anti_data %>%
mutate(ID = Cluster, Chr = chromosome) %>%
dplyr::select(ID,Chr ,Start, Stop, Type, Type2)
# Extract only Start and Stop from antismash data into matrix
anti_inter <- anti_data %>%
select(Start, Stop) %>%
as.matrix()
# Start/Stop columns from prism data as matrix
prism_inter <- prism_data %>%
select(Start,Stop) %>%
as.matrix()
test <- makeGRangesFromDataFrame(anti_inter)
# Extract only Start and Stop from antismash data into matrix
anti_inter <- anti_data %>%
select(seqnames = ID, Start, Stop) %>%
as.matrix()
# Extract only Start and Stop from antismash data into matrix
anti_inter <- anti_data %>%
select(seqnames = Cluster, Start, Stop) %>%
as.matrix()
test <- makeGRangesFromDataFrame(anti_inter)
View(test)
# Start/Stop columns from prism data as matrix
prism_inter <- prism_data %>%
select(seqnames = Cluster,Start,Stop) %>%
as.matrix()
test2 <- makeGRangesFromDataFrame(prism_inter)
intersect(test, test2)
intersect(test$ranges, test2$ranges)
test$ranges
test@ranges
intersect(test@ranges, test2@ranges)
test
test
union(test, test2)
union(test, test)
test_in <- union(test, test)
test_in <- GenomicRanges::union(test, test)
View(test_in)
GenomicRanges::intersect(test, test2)
GenomicRanges::intersect(test2, test)
test2
GenomicRanges::intersect(test2, test)
test
GenomicRanges::union(test2, test)
GenomicRanges::union(test, test2)
GenomicRanges::intersect(test, test2)
# Extract only Start and Stop from antismash data into matrix
anti_inter <- anti_data %>%
select(seqnames = paste0("A: ",Cluster), Start, Stop) %>%
as.matrix()
# Extract only Start and Stop from antismash data into matrix
anti_inter <- anti_data %>%
select(seqnames = paste0("A: ",Cluster), Start, Stop)
# Extract only Start and Stop from antismash data into matrix
anti_inter <- anti_data %>%
select(seqnames = paste0("A: ", anti_data$Cluster), Start, Stop)
# Extract only Start and Stop from antismash data into matrix
anti_inter <- anti_data %>%
select(seqnames = Cluster, Start, Stop)
anti_inter$seqnames <- paste0("A: ", anti_data$Cluster)
# Start/Stop columns from prism data as matrix
prism_inter <- prism_data %>%
select(seqnames = Cluster,Start,Stop)
prism_inter$seqnames <- paste0("P: ", prism_data$Cluster)
test <- makeGRangesFromDataFrame(anti_inter)
test2 <- makeGRangesFromDataFrame(prism_inter)
GenomicRanges::intersect(test, test2)
test
test2
GenomicRanges::intersect(test, test2)
# Start/Stop columns from prism data as matrix
prism_inter <- prism_data %>%
select(seqnames = Cluster,Start,Stop)
prism_inter$seqnames <- "prism"
anti_inter$seqnames <- "anti"
test <- makeGRangesFromDataFrame(anti_inter)
test2 <- makeGRangesFromDataFrame(prism_inter)
GenomicRanges::intersect(test, test2)
View(test2)
seqnames(test)
ranges(test)
test3 <- head(test)
GenomicRanges::intersect(test, test3)
GenomicRanges::intersect(test, test2)
seqlengths(test) <- 90000000
seqlengths(test2) <- 90000000
GenomicRanges::intersect(test, test2)
GenomicRanges::reduce(test)
seqlevels(test)
prism_inter$seqnames <- "anti"
test2 <- GenomicRanges::makeGRangesFromDataFrame(prism_inter)
GenomicRanges::intersect(test, test2)
GenomicRanges::union(test, test2)
GenomicRanges::intersect(test, test2)
test@ranges@NAMES <- paste0("A: ", seq(1:27))
GenomicRanges::intersect(test, test2)
test
GenomicRanges::intersect(test, test2)
GenomicRanges::intersect(test2, test)
GenomicRanges::intersect(test2, test)
GenomicRanges::intersect(test, test2)
test2@ranges@NAMES <- paste0("P: ", seq(1:19))
GenomicRanges::intersect(test2, test)
test_in <- GenomicRanges::intersect(test2, test)
View(test_in)
findOverlaps(test, test2)
test_in <- findOverlaps(test, test2)
View(test_in)
test_in@from
# Start/Stop columns from prism data as matrix
prism_inter <- prism_data %>%
select(seqnames = Cluster,Start,Stop)
# Extract only Start and Stop from antismash data into matrix
anti_inter <- anti_data %>%
select(seqnames = Cluster, Start, Stop)
test <- makeGRangesFromDataFrame(anti_inter)
test2 <- makeGRangesFromDataFrame(prism_inter)
findOverlaps(test, test2)
# Extract only Start and Stop from antismash data into matrix
anti_inter <- anti_data %>%
select(seqnames = "chr1", Start, Stop)
# Extract only Start and Stop from antismash data into matrix
anti_inter <- anti_data %>%
select(Start, Stop)
anti_inter$seqnames <- "chr"
# Start/Stop columns from prism data as matrix
prism_inter <- prism_data %>%
select(Start,Stop)
prism_inter$seqnames <- "chr"
test <- makeGRangesFromDataFrame(anti_inter)
test2 <- makeGRangesFromDataFrame(prism_inter)
findOverlaps(test, test2)
findOverlaps(test2, test)
test_in@from
test_in <- findOverlaps(test2, test)
test_in@from
anti_inter <- anti_data %>%
select(Start, Stop) %>%
as.matrix()
# Store PRISM data start/stop as matrix  for further interception calculation
prism_inter <- prism_data %>%
select(Start, Stop) %>%
as.matrix()
x <- anti_data
y <- prism_inter
x <- anti_inter
interseption <- annotate(x, y)
IntervalSurgeon::inteseption(x,y)
IntervalSurgeon::intersects(x,y)
interseption <- IntervalSurgeon::annotate(x,y)
inter_x <- unlist(interseption, use.names=FALSE)
inter_tmp <- which(sapply(interseption,length )!=0)
inter_y <- c()
if (length(inter_tmp) != 0) {
tmp <- sapply(interseption,length)
for (i in seq(1:length(tmp[which(tmp != 0)]))) {
inter_y <- c(inter_y,rep(inter_tmp[i],tmp[which(tmp != 0)][i]))
}}
test_in@to
runApp()
runApp()
runApp()
# Store DeepBGC dataframe in variable
deep_inter <- deep_data
known_table$seqnames <- "chr"
runApp()
runApp()
View(deep_inter)
deep_inter$seqnames <- "chr"
runApp()
runApp()
runApp()
shiny::runApp()
library(IntervalSurgeon)
runApp()
shiny::runApp()
shiny::runApp()
install.packages(c("BioCircos", "ggplot2", "plotly",  "plyr", "tidyverse", "shiny", "DT" ,"rjson", "stringr", "shinyjs" ))
install.packages(c("BioCircos", "ggplot2", "plotly", "plyr", "tidyverse", "shiny", "DT", "rjson", "stringr", "shinyjs"))
shiny::runApp()
BiocManager::repositories()
options(repos = BiocManager::repositories())
library(cluster)
library(factoextra)
install.packages(c("shiny", "MBmca", "ggplot2", "dplyr", "reshape2", "mclust",  "plotly", "xtable","shinyjs", "tidyverse", "factoextra", "dbscan" ))
install.packages(c("shiny", "MBmca", "ggplot2", "dplyr", "reshape2", "mclust", "plotly", "xtable", "shinyjs", "tidyverse", "factoextra", "dbscan"))
library(devtools)
install_url("https://cran.r-project.org/src/contrib/Archive/MBmca/MBmca_0.0.3-5.tar.gz")
install.packages("devtools")
install.packages("gert")
devtools::install_url("https://cran.r-project.org/src/contrib/Archive/MBmca/MBmca_0.0.3-5.tar.gz")
install.packages("gert")
install.packages("devtools")
devtools::install_url("https://cran.r-project.org/src/contrib/Archive/MBmca/MBmca_0.0.3-5.tar.gz")
shiny::runApp('hrmR')
runApp('hrmR')
runApp('hrmR')
install.packages("chipPCR")
install.packages("chipPCR")
install.packages("chipPCR")
devtools::install_url("https://cran.r-project.org/src/contrib/Archive/chipPCR/chipPCR_0.0.8-10.tar.gz")
shiny::runApp('hrmR')
shiny::runApp('/run/media/pavloh/DATA_BANK/WORK/BGCViz')
runApp('/run/media/pavloh/DATA_BANK/WORK/BGCViz')
rsconnect::setAccountInfo(name='ostash-group',
token='205B1B7435102DC51EDCC2DB879EB9F1',
secret='UnN/9siAgowX5rECgxRt51FgtA/47ssZCvSzEw0b')
options(repos = BiocManager::repositories())
library(rsconnect)
shiny::runApp('/run/media/pavloh/DATA_BANK/WORK/BGCViz/Redirection/Test_redirection')
runApp('/run/media/pavloh/DATA_BANK/WORK/BGCViz/Redirection/Test_redirection')
runApp('/run/media/pavloh/DATA_BANK/WORK/BGCViz/Redirection/Test_redirection')
devtools::document()
setwd("~/WORK/RaukR/project/new/ReMIXTURE2")
devtools::document()
test <- ReMIXTURE$new(distance_matrix, geocenters)
test$run(iterations = 10)
test$run(iterations = 10, parallelize = T)
test$run(iterations = 100, parallelize = T)
test$run(iterations = 100)
devtools::document()
test <- ReMIXTURE$new(distance_matrix, geocenters)
test$run(iterations = 100, parallelize = T)
devtools::load_all()
test <- ReMIXTURE$new(distance_matrix, geocenters)
test$run(iterations = 100, parallelize = T)
devtools::load_all()
test <- ReMIXTURE$new(distance_matrix, geocenters)
test$run(iterations = 1000, parallelize = T)
